[{"path":"https://2degreesinvesting.github.io/tilt.company.match/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tilt.company.match authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/standalone.html","id":"standalone-r","dir":"Articles","previous_headings":"","what":"standalone.R","title":"Standalone (code)","text":"","code":"#' Aborts when data has missing values on non-nullable columns #' #' @param data Tibble holding a result data set. #' @param non_nullable_cols A character vector holding names of columns on which #'   `NA`s are not allowed. #' #' @return Input `data` invisibly. #' @export #' #' @examples #' data <- tibble::tibble(x = NA, y = 1, z = NA) #' #' # With NA in nullable columns returns data invisibly #' data %>% abort_if_incomplete(non_nullable_cols = \"y\") #' out <- data %>% abort_if_incomplete(non_nullable_cols = \"y\") #' identical(out, data) #' #' # With NA in one nullable column, alerts the column to review as an error #' data %>% #'   abort_if_incomplete(non_nullable_cols = c(\"x\", \"y\")) %>% #'   try() #' #' # By default, it takes all columns as non-nullable #' data %>% #'   abort_if_incomplete() %>% #'   try() abort_if_incomplete <- function(data, non_nullable_cols = names(data)) {   incomplete <- select_incomplete(data[non_nullable_cols])   if (any(incomplete)) {     cols <- toString(names(incomplete[incomplete]))     rlang::abort(c(       \"Non-nullable columns must not have `NA`s.\",       x = paste0(\"Columns to review: \", cols)     ))   }   invisible(data) }  select_incomplete <- function(data) {   missing <- purrr::keep(data, function(x) any(is.na(x)))   unlist(lapply(missing, anyNA)) } #' Check if a named object contains expected names #' #' Based on fgeo.tool::check_crucial_names() #' #' @param x A named object. #' @param expected_names String; expected names of `x`. #' #' @return Invisible `x`, or an error with informative message. #' #' Adapted from: https://github.com/RMI-PACTA/r2dii.match/blob/main/R/check_crucial_names.R #' #' @examples #' x <- c(a = 1) #' check_crucial_names(x, \"a\") #' try(check_crucial_names(x, \"bad\")) #' @export check_crucial_names <- function(x, expected_names) {   stopifnot(rlang::is_named(x))   stopifnot(is.character(expected_names))    ok <- all(unique(expected_names) %in% names(x))   if (!ok) {     abort_missing_names(sort(setdiff(expected_names, names(x))))   }    invisible(x) }  abort_missing_names <- function(missing_names) {   rlang::abort(     \"missing_names\",     message = glue::glue(       \"Must have missing names:       {paste0('`', missing_names, '`', collapse = ', ')}\"     )   ) } #' Demo loanbook entries #' #' A simplified demo tilt company data set to illustrate and test matching with #' loanbook. For details on included cases please refer to data generation #' script. #' #' @format A tibble with 11 rows and 5 variables: #' \\describe{ #' \\item{id}{a numeric id} #' \\item{company_name}{name of company} #' \\item{postcode}{postcode of company} #' \\item{country}{country name in lowercase} #' \\item{misc_info}{A placeholder column that holds additional information that human matchers would consider in matching} #' } #' @examples #' demo_loanbook \"demo_loanbook\" #' Demo matched db entries #' #' A simplified demo matched company data set to illustrate the manual matching process with #' loanbook. For details on included cases please refer to data generation #' script. #' #' @format A tibble with 9 rows and 5 variables: #' \\describe{ #' \\item{id}{a numeric id} #' \\item{company_name}{name of company} #' \\item{postcode}{postcode of company} #' \\item{country}{country name in lowercase} #' \\item{misc_info}{A placeholder column that holds additional information that human matchers would consider in matching} #' \\item{company_alias}{name of the company, preprocessed} #' \\item{id_tilt}{a numeric id in the tilt db} #' \\item{company_name_tilt}{name of company} #' \\item{misc_info_tilt}{A placeholder column that holds additional information that human matchers would consider in matching} #' \\item{company_alias_tilt}{name of the company, preprocessed} #' \\item{string_sim}{string similarity between aliased company name in the loanbook and aliase company name in tilt db} #' \\item{suggest_match}{set to TRUE if string_sim is above a certain threshold} #' \\item{accept_match}{manual decision to whether the company from the loanbook matches a comapny in the tilt db} #' } #' @examples #' demo_matched \"demo_matched\" #' Demo tilt db entries #' #' A simplified demo tilt company data set to illustrate and test matching with #' loanbook. For details on included cases please refer to data generation #' script. #' #' @format A tibble with 9 rows and 5 variables: #' \\describe{ #' \\item{id}{a numeric id} #' \\item{company_name}{name of company} #' \\item{postcode}{postcode of company} #' \\item{country}{country name in lowercase} #' \\item{misc_info}{A placeholder column that holds additional information that human matchers would consider in matching} #' } #' @examples #' demo_tilt \"demo_tilt\" #' Detect duplicated strings #' #' @inheritDotParams base::paste #' @return  A logical vector of the same length as the longest vector passed to #'   `...`. #' @export #' @examples #' duplicated_paste(c(\"a\", \"a\"), 1:2) #' paste(c(\"a\", \"a\"), 1:2) #' #' duplicated_paste(c(\"a\", \"a\"), c(1, 1)) #' paste(c(\"a\", \"a\"), c(1, 1)) duplicated_paste <- function(...) {   duplicated(paste(...)) } #' Get the path to an example file #' #' @param file Name of the file. #' #' @return A path. #' @export #' #' @examples #' example_file(\"demo_loanbook.csv\") #' #' example_file(\"demo_tilt.csv\") #' #' example_file(\"demo_matched.csv\") example_file <- function(file) {   system.file(\"extdata\", file, package = \"tilt.company.match\", mustWork = TRUE) } #' @keywords internal \"_PACKAGE\"  ## usethis namespace: start #' @importFrom readr read_csv #' @importFrom stringdist stringsim #' @importFrom tibble tibble ## usethis namespace: end NULL #' Assign an additional name to an entity #' #' * `to_alias()` takes any character vector and creates an alias by #' transforming the input (a) to lower case; (b) to latin-ascii characters; and #' (c) to standard abbreviations of ownership types. Commonly, the inputs are #' values from the columns `name_direct_loantaker` or `name_ultimate_parent` #' of a loanbook dataset, or from the column `name_company` of an asset-level #' dataset. #' * `from_name_to_alias()` outputs a table giving default strings used to #' convert from a name to its alias. You may amend this table and pass it to #' `to_alias()` via the `from_to` argument. #' #' @section Assigning aliases: #' The transformation process used to compare names between loanbook and tilt #' datasets applies best practices commonly used in name matching algorithms: #' * Remove special characters. #' * Replace language specific characters. #' * Abbreviate certain names to reduce their importance in the matching. #' * Spell out numbers to increase their importance. #' #' @author person(given = \"Evgeny\", family = \"Petrovsky\", role = c(\"aut\", #'   \"ctr\")) #' #' Adapted from: https://github.com/RMI-PACTA/r2dii.match/blob/main/R/to_alias.R #' #' @source [r2dii.match](https://cran.r-project.org/package=r2dii.match) version 0.1.3. #' #' @param x Character string, commonly from the columns `name_direct_loantaker` #'   or `name_ultimate_parent` of a loanbook dataset, or from the column #'   `name_company` of an asset-level dataset. #' @param from_to A data frame with replacement rules to be applied, contains #'   columns `from` (for initial values) and `to` (for resulting values). #' @param ownership vector of company ownership types to be distinguished for #'   cut-off or separation. #' @param remove_ownership Flag that defines whether ownership type (like llc) #'   should be cut-off. #' #' @return #' * `to_alias()` returns a character string. #' * `from_name_to_alias()` returns a [tibble::tibble] with columns `from` and #' `to`. #' #' @examples #' library(dplyr) #' #' to_alias(\"A. and B\") #' to_alias(\"Acuity Brands Inc\") #' to_alias(c(\"3M Company\", \"Abbott Laboratories\", \"AbbVie Inc.\")) #' #' custom_replacement <- tibble(from = \"AAAA\", to = \"B\") #' to_alias(\"Aa Aaaa\", from_to = custom_replacement) #' #' neutral_replacement <- tibble(from = character(0), to = character(0)) #' to_alias(\"Company Name Owner\", from_to = neutral_replacement) #' to_alias( #'   \"Company Name Owner\", #'   from_to = neutral_replacement, #'   ownership = \"owner\", #'   remove_ownership = TRUE #' ) #' #' from_name_to_alias() #' #' append_replacements <- from_name_to_alias() %>% #'   add_row( #'     .before = 1, #'     from = c(\"AA\", \"BB\"), to = c(\"alpha\", \"beta\") #'   ) #' append_replacements #' #' # And in combination with `to_alias()` #' to_alias(c(\"AA\", \"BB\", \"1\"), from_to = append_replacements) #' @export to_alias <- function(x,                      from_to = NULL,                      ownership = NULL,                      remove_ownership = FALSE) {   out <- x   # base latin characters   out <- stringi::stri_trans_general(out, \"any-latin\")   out <- stringi::stri_trans_general(out, \"latin-ascii\")   # lowercase   out <- tolower(out)    # symbols   out <- purrr::reduce(get_sym_replace(), replace_abbrev, fixed = TRUE, .init = out)    # only one space between words   out <- gsub(\"[[:space:]]+\", \" \", out)    out <- replace_with_abbreviation(from_to, .init = out)    # trim redundant whitespaces   out <- trimws(out, which = \"both\")    # ?   out <- gsub(\"(?<=\\\\s[a-z]{1}) (?=[a-z]{1})\", \"\", out, perl = TRUE)    out <- may_remove_ownership(remove_ownership, ownership, .init = out)    # final adjustments   out <- gsub(\"-\", \" \", out)   out <- gsub(\"[[:space:]]\", \"\", out)   out <- gsub(\"[^[:alnum:][:space:]$]\", \"\", out)   out <- gsub(\"$\", \" \", out, fixed = TRUE)    out }  may_remove_ownership <- function(remove_ownership, ownership, .init) {   ownership <- ownership %||% get_ownership_type()    # ownership type distinguished (with $ sign) in company name   paste_or_not <- function(x, remove_ownership) {     if (remove_ownership) {       c(paste0(\" \", x, \"$\"), \"\")     } else {       c(paste0(\" \", x, \"$\"), paste0(\"$\", x))     }   }    out <- purrr::map(ownership, ~ paste_or_not(.x, remove_ownership))   purrr::reduce(out, replace_abbrev, .init = .init) }  # Technology mix for analysis get_ownership_type <- function() {   c(     \"ab\",     \"ag\",     \"as\",     \"asa\",     \"bhd\",     \"bsc\",     \"bv\",     \"co\",     \"corp\",     \"cv\",     \"dac\",     \"gmbh\",     \"govt\",     \"hldgs\",     \"inc\",     \"intl\",     \"jsc\",     \"llc\",     \"lp\",     \"ltd\",     \"nv\",     \"pcl\",     \"pjsc\",     \"plc\",     \"pt\",     \"pte\",     \"sa\",     \"sarl\",     \"sas\",     \"se\",     \"spa\",     \"spzoo\",     \"srl\"   ) }  # replace each lhs with rhs get_sym_replace <- function() {   list(     c(\".\", \" \"),     c(\",\", \" \"),     c(\"_\", \" \"),     c(\"/\", \" \"),     c(\"$\", \"\")   ) }  #' From name to alias #' #' Function that outputs a table giving default strings used to #' convert from a name to its alias. You may amend this table and pass it to #' `to_alias()` via the `from_to` argument. #' #' Source: @jdhoffa https://github.com/RMI-PACTA/r2dii.dataraw/pull/8 #' #' @return [tibble::tibble] with columns `from` and #' `to`. #' @export from_name_to_alias <- function() {   # styler: off   tibble::tribble(     ~from,               ~to,     \" and \",             \" & \",     \" en \",             \" & \",     \" och \",             \" & \",     \" und \",             \" & \",     \"(pjsc)\",                \"\",     \"(pte)\",                \"\",     \"(pvt)\",                \"\",     \"0\",            \"null\",     \"1\",             \"one\",     \"2\",             \"two\",     \"3\",           \"three\",     \"4\",            \"four\",     \"5\",            \"five\",     \"6\",             \"six\",     \"7\",           \"seven\",     \"8\",           \"eight\",     \"9\",            \"nine\",     \"aktg\",              \"ag\",     \"associate\",           \"assoc\",     \"associates\",           \"assoc\",     \"berhad\",             \"bhd\",     \"company\",              \"co\",     \"corporation\",            \"corp\",     \"designated activity company\",             \"dac\",     \"development\",             \"dev\",     \"finance\",            \"fine\",     \"financial\",            \"fina\",     \"financial\",             \"fin\",     \"financing\",            \"fing\",     \"generation\",             \"gen\",     \"generation\",             \"gen\",     \"golden\",             \"gld\",     \"government\",            \"govt\",     \"groep\",             \"grp\",     \"group\",             \"grp\",     \"holding\",           \"hldgs\",     \"holdings\",           \"hldgs\",     \"incorporated\",             \"inc\",     \"international\",            \"intl\",     \"investment\",          \"invest\",     \"investment\",          \"invest\",     \"limited\",             \"ltd\",     \"limited partnership\",              \"lp\",     \"ltd liability co\",             \"llc\",     \"ograniczona odpowiedzialnoscia\",              \"oo\",     \"partner\",             \"prt\",     \"partners\",             \"prt\",     \"public co ltd\",             \"pcl\",     \"public ltd co\",             \"plc\",     \"resource\",             \"res\",     \"resources\",             \"res\",     \"san tic anonim sti\", \"santicanonimsti\",     \"san tic ltd sti\",    \"santicltdsti\",     \"sanayi\",             \"san\",     \"sanayi ve ticaret\",  \"sanayi ticaret\",     \"shipping\",             \"shp\",     \"sirketi\",             \"sti\",     \"sp z o o\",           \"spzoo\",     \"sp z oo\",           \"spzoo\",     \"spolka z \",           \"sp z \",     \"ticaret\",             \"tic\"   )   # styler: on }  `%||%` <- function(x, y) {   if (is.null(x)) {     y   } else {     x   } }  replace_with_abbreviation <- function(replacement, .init) {   replacement <- replacement %||% from_name_to_alias()   replacement <- purrr::set_names(replacement, tolower)    check_crucial_names(replacement, c(\"from\", \"to\"))    abbrev <- purrr::map2(tolower(replacement$from), tolower(replacement$to), c)   purrr::reduce(abbrev, replace_abbrev, fixed = TRUE, .init = .init) }  # replace long words with abbreviations replace_abbrev <- function(text, abr, fixed = FALSE) {   gsub(abr[1], abr[2], text, fixed = fixed) } #' Pipe operator #' #' See \\code{magrittr::\\link[magrittr:pipe]{\\%>\\%}} for details. #' #' @name %>% #' @rdname pipe #' @keywords internal #' @export #' @importFrom magrittr %>% #' @usage lhs \\%>\\% rhs #' @param lhs A value or the magrittr placeholder. #' @param rhs A function call using the magrittr semantics. #' @return The result of calling `rhs(lhs)`. NULL #' Report duplicate rows #' #' Reports duplicates in `data` on columns `cols`. More specifically, we are #' interested in this case on the `company_name`, `postcode` and `country` columns. #' Duplicates are reported via a warning. #' #' @param data Tibble holding a result data set. #' @param cols Vector of columns names on which we want to test if there are #' duplicates on. #' #' @return NULL #' @export report_duplicates <- function(data, cols) {   duplicates <- data %>%     dplyr::group_by(!!!rlang::syms(cols)) %>%     dplyr::filter(dplyr::n() > 1) %>%     dplyr::select(!!!rlang::syms(cols)) %>%     dplyr::distinct_all()    if (nrow(duplicates) > 0) {     rlang::inform(       c(         paste0(\"Found duplicate(s) on columns \", paste(cols, collapse = \", \"), \" of the data set.\"),         x = duplicates %>% glue::glue_data(\"Found for the company {company_name}, postcode: {postcode}, country: {country}\"),         i = \"Please check if these duplicates are intended and have an unique id.\"       )     )   }    return(invisible()) }  #' Reports companies that were not matched in the loanbook #' #' @param loanbook Loanbook data set #' #' @param manually_matched Tibble holding the result of the matching process, after the #'   user has manually selected and matched the companies in the loanbook with #'   the tilt data set. #' #' @return `not_matched_companies` Tibble holding id and company name of the companies #' not matched by the tilt data set. #' #' @export report_no_matches <- function(loanbook, manually_matched) {   # Filter first by all the manual successful matches in order to   # suppress the duplicates caused by the string matching.   matched <- manually_matched %>%     dplyr::filter(.data$accept_match == TRUE)    coverage <- dplyr::left_join(loanbook, matched) %>%     dplyr::mutate(       matched = dplyr::case_when(         accept_match == TRUE ~ \"Matched\",         is.na(accept_match) ~ \"Not Matched\",         TRUE ~ \"Not Matched\"       )     )    not_matched_companies <- coverage %>%     dplyr::filter(matched == \"Not Matched\") %>%     dplyr::distinct(.data$company_name, .data$id)    if (nrow(not_matched_companies > 0)) {     rlang::inform(       c(         \"Companies not matched in the loanbook by the tilt data set:\",         x = not_matched_companies %>%           glue::glue_data(\"{company_name}\"),         i = \"Did you match these companies manually correctly ?\"       )     )   }    return(not_matched_companies) }  #' Reports duplicates from manual matching outcome #' #' Function throws a descriptive error if a company from the loanbook is #' matched to > 1 company in the tilt db or reverse. #' #' #' @param manually_matched Tibble holding the result of the matching process, #'   after the user has manually verified and matched the results #' #' @return Input `manually_matched` #' @importFrom rlang .data #' @export check_duplicated_relation <- function(manually_matched) {   suggested_matches <- manually_matched %>%     dplyr::filter(.data$accept_match)    duplicates_in_loanbook <- suggested_matches %>%     dplyr::group_by(.data$id, .data$company_name) %>%     dplyr::mutate(nrow = dplyr::n()) %>%     dplyr::filter(nrow > 1)    if (nrow(duplicates_in_loanbook) > 0) {     duplicated_companies <- duplicates_in_loanbook %>%       dplyr::distinct(.data$id, .data$company_name)      rlang::abort(       c(         \"Duplicated match of company in loanbook detected.\",         x = duplicated_companies %>% glue::glue_data(\"Duplicated company name: {company_name}, id: {id}.\"),         i = c(           \"Company names where `accept_match` is `TRUE` must be unique by `id`.\",           \"Have you ensured that only one tilt-id per loanbook-id is set to `TRUE`?\"         )       )     )   }    duplicates_in_tilt <- suggested_matches %>%     dplyr::group_by(.data$id_tilt, .data$company_name_tilt) %>%     dplyr::mutate(nrow = dplyr::n()) %>%     dplyr::filter(nrow > 1)    if (nrow(duplicates_in_tilt) > 0) {     duplicated_companies <- duplicates_in_tilt %>%       dplyr::distinct(.data$id_tilt)      rlang::abort(       c(         \"Duplicated match of company from tilt db detected.\",         x = duplicated_companies %>% glue::glue_data(\"Duplicated tilt company name: {company_name_tilt}, tilt id: {id_tilt}.\"),         i = c(           \"Have you ensured that each tilt-id is set to `TRUE` for maximum 1 company from the loanbook?\"         )       )     )   }    rlang::inform(message = \"No duplicated matches found in the data.\")    return(invisible(manually_matched)) }"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"considerations","dir":"Articles","previous_headings":"","what":"Considerations","title":"tilt.company.match","text":"company’s name may different dataset, example typos. company’s country postcode useful. match name, country, postcode reliable match name alone. company may exist tilt dataset.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"Data requirements","title":"tilt.company.match","text":"loanbook tilt dataset must meet requirements: ’s R dataframe. columns id, company_name, postcode, country. may may columns. column id holds unique row-identifiers.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"in-r-session-1","dir":"Articles","previous_headings":"","what":"1. In R (session 1)","title":"tilt.company.match","text":"first R session ’ll create dataset candidate matches companies loanbook.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"install-and-use-r-packages","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Install and use R packages","title":"tilt.company.match","text":"need package tilt.company.match. can install GitHub : ’ll also use packages dplyr stringdist install automatically tilt.company.match. can use :","code":"# install.packages(\"devtools\") devtools::install_github(\"2DegreesInvesting/tilt.company.match\") library(dplyr, warn.conflicts = FALSE) library(readr, warn.conflicts = FALSE) library(stringdist) library(tilt.company.match)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"read-the-datasets","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Read the datasets","title":"tilt.company.match","text":"example uses “demo” loanbook. use real loanbook instead","code":"# If you don't have the readr package you can install it with # install.packages(\"readr\")  # TODO: Replace with the path/to/your/real/loanbook.csv loanbook_csv <- example_file(\"demo_loanbook.csv\") loanbook_csv #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_loanbook.csv\"  loanbook <- read_csv(loanbook_csv, show_col_types = FALSE) loanbook #> # A tibble: 12 × 5 #>       id company_name           postcode country misc_info #>    <dbl> <chr>                  <chr>    <chr>   <chr>     #>  1     1 Peasant Peter          01234    germany A         #>  2     2 Peasant Peter          01234    germany Z         #>  3     3 Peasant Peter          11234    germany Z         #>  4     4 Peasant Paul           01234    germany Z         #>  5     5 Bread Bakers Limited   23456    germany C         #>  6     6 Flower Power & Company 34567    germany Z         #>  7     7 Screwdriver Experts    45678    germany D         #>  8     8 Screwdriver Expert     45678    germany Z         #>  9     9 John Meier's Groceries 56789    germany E         #> 10    10 John Meier's Groceries 55555    germany Y         #> 11    11 John Meier's Groceries 55555    norway  Y         #> 12    12 Best Bakers            65656    france  F  # TODO: Replace with the path/to/your/real/tilt.csv tilt_csv <- example_file(\"demo_tilt.csv\") tilt_csv #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_tilt.csv\"  tilt <- read_csv(tilt_csv, show_col_types = FALSE) tilt #> # A tibble: 11 × 5 #>       id company_name                 postcode country misc_info #>    <dbl> <chr>                        <chr>    <chr>   <chr>     #>  1     1 Peasant Peter                01234    germany A         #>  2     2 Peasant Peter                01234    germany Z         #>  3     3 Peasant Peter                11234    germany Z         #>  4     4 Peasant Paul                 01234    germany B         #>  5     5 The Bread Bakers Ltd         23456    germany C         #>  6     6 Flower Power Friends and Co. 34567    germany D         #>  7     7 Flower Power and Co.         34567    germany F         #>  8     8 John and Jacques Groceries   56789    germany E         #>  9     9 John and Jacques Groceries   98765    germany E         #> 10    10 John and Jacques Groceries   98765    france  E         #> 11    11 Cranes and Friends           65656    france  F"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"check-data-quality","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Check data quality","title":"tilt.company.match","text":"Let’s first check loanbook expect.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"expected-columns","dir":"Articles","previous_headings":"1. In R (session 1) > Check data quality","what":"Expected columns","title":"tilt.company.match","text":"expected columns id, company_name, postcode, country?","code":"expected <- c(\"id\", \"company_name\", \"postcode\", \"country\") loanbook %>% check_crucial_names(expected)  # Anything different throws an error bad <- rename(loanbook, ids = id) bad %>%   check_crucial_names(expected) %>%   try() #> Error in abort_missing_names(sort(setdiff(expected_names, names(x)))) :  #>   Must have missing names: #> `id`"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"duplicates","dir":"Articles","previous_headings":"1. In R (session 1) > Check data quality","what":"Duplicates","title":"tilt.company.match","text":"duplicates column id? duplicates company_name, postcode country? ’s best none. find duplicates belong different companies, don’t fix . example, column misc_info suggests duplicates belong different companies, ’s OK:","code":"has_no_duplicates <- identical(anyDuplicated(loanbook$id), 0L) # If you get an error, remove the duplicates and try again stopifnot(has_no_duplicates) best_without_duplicates <- c(\"company_name\", \"postcode\", \"country\") report_duplicates(loanbook, best_without_duplicates) #> Found duplicate(s) on columns company_name, postcode, country of the data set. #> ✖ Found for the company Peasant Peter, postcode: 01234, country: germany #> ℹ Please check if these duplicates are intended and have an unique id. loanbook %>%   filter(company_name == \"Peasant Peter\") %>%   filter(postcode == \"01234\") #> # A tibble: 2 × 5 #>      id company_name  postcode country misc_info #>   <dbl> <chr>         <chr>    <chr>   <chr>     #> 1     1 Peasant Peter 01234    germany A         #> 2     2 Peasant Peter 01234    germany Z"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"missing-values","dir":"Articles","previous_headings":"1. In R (session 1) > Check data quality","what":"Missing values","title":"tilt.company.match","text":"missing values (NAs) non-nullable columns? Non-nullable columns must missing values. remove . Missing values columns fine. example, non-nullable id column one missing value:","code":"non_nullable <- c(\"id\", \"company_name\") loanbook %>% abort_if_incomplete(non_nullable) bad_loanbook <- tribble(   ~id,             ~company_name, ~postcode,  ~country, ~misc_info,    NA,  \"John Meier's Groceries\",   \"55555\", \"germany\",        \"Y\",    11,  \"John Meier's Groceries\",   \"55555\",  \"norway\",        \"Y\" ) bad_loanbook %>%   abort_if_incomplete(non_nullable) %>%   try() #> Error in abort_if_incomplete(., non_nullable) :  #>   Non-nullable columns must not have `NA`s. #> ✖ Columns to review: id  fixed_loanbook <- filter(bad_loanbook, !is.na(id)) # NA's are OK in columns other than non-nullable ones fixed_loanbook #> # A tibble: 1 × 5 #>      id company_name           postcode country misc_info #>   <dbl> <chr>                  <chr>    <chr>   <chr>     #> 1    11 John Meier's Groceries 55555    norway  Y  fixed_loanbook %>% abort_if_incomplete(non_nullable)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"create-a-standard-alias-of-company_name-in-both-datasets","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Create a standard alias of company_name in both datasets","title":"tilt.company.match","text":"Use to_alias() reduce chance ’ll miss match spurious differences company name loanbook tilt dataset. helps get less noisy, consistent version company_name two datasets.","code":"loanbook_alias <- loanbook %>% mutate(company_alias = to_alias(company_name)) loanbook_alias #> # A tibble: 12 × 6 #>       id company_name           postcode country misc_info company_alias       #>    <dbl> <chr>                  <chr>    <chr>   <chr>     <chr>               #>  1     1 Peasant Peter          01234    germany A         peasantpeter        #>  2     2 Peasant Peter          01234    germany Z         peasantpeter        #>  3     3 Peasant Peter          11234    germany Z         peasantpeter        #>  4     4 Peasant Paul           01234    germany Z         peasantpaul         #>  5     5 Bread Bakers Limited   23456    germany C         breadbakers ltd     #>  6     6 Flower Power & Company 34567    germany Z         flowerpower co      #>  7     7 Screwdriver Experts    45678    germany D         screwdriverexperts  #>  8     8 Screwdriver Expert     45678    germany Z         screwdriverexpert   #>  9     9 John Meier's Groceries 56789    germany E         johnmeiersgroceries #> 10    10 John Meier's Groceries 55555    germany Y         johnmeiersgroceries #> 11    11 John Meier's Groceries 55555    norway  Y         johnmeiersgroceries #> 12    12 Best Bakers            65656    france  F         bestbakers  tilt_alias <- tilt %>% mutate(company_alias = to_alias(company_name)) tilt_alias #> # A tibble: 11 × 6 #>       id company_name                 postcode country misc_info company_alias   #>    <dbl> <chr>                        <chr>    <chr>   <chr>     <chr>           #>  1     1 Peasant Peter                01234    germany A         peasantpeter    #>  2     2 Peasant Peter                01234    germany Z         peasantpeter    #>  3     3 Peasant Peter                11234    germany Z         peasantpeter    #>  4     4 Peasant Paul                 01234    germany B         peasantpaul     #>  5     5 The Bread Bakers Ltd         23456    germany C         thebreadbakers… #>  6     6 Flower Power Friends and Co. 34567    germany D         flowerpowerfri… #>  7     7 Flower Power and Co.         34567    germany F         flowerpower co  #>  8     8 John and Jacques Groceries   56789    germany E         johnjacquesgro… #>  9     9 John and Jacques Groceries   98765    germany E         johnjacquesgro… #> 10    10 John and Jacques Groceries   98765    france  E         johnjacquesgro… #> 11    11 Cranes and Friends           65656    france  F         cranesfriends"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"match-candidates","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Match candidates","title":"tilt.company.match","text":"identify matching candidates, join two datasets allowing one company loanbook match \"\" potentially multiple companies country postcode. example, one company loanbook matches three candidates tilt dataset: Next, calculate string similarity aliased company_name loanbook tilt datasets. Complete similarity corresponds 1, complete dissimilarity corresponds 0. company loanbook, arrange matching candidates descending similarity.","code":"candidates <- left_join(   loanbook_alias, tilt_alias,   by = c(\"country\", \"postcode\"),   # Add the suffix \"_tilt\" to each column from the tilt dataset   suffix = c(\"\", \"_tilt\"),   # Allow matching each company in loanbook to many companies in tilt   multiple = \"all\" ) candidates %>%   filter(id == 1) %>%   select(company_alias, id_tilt, company_alias_tilt) #> # A tibble: 3 × 3 #>   company_alias id_tilt company_alias_tilt #>   <chr>           <dbl> <chr>              #> 1 peasantpeter        1 peasantpeter       #> 2 peasantpeter        2 peasantpeter       #> 3 peasantpeter        4 peasantpaul okay_candidates <- candidates %>%   # Other parameters may perform best. See `?stringdist::stringsim`   mutate(similarity = stringsim(     company_alias, company_alias_tilt,     # Good to compare human typed text that might have typos.     method = \"jw\",     p = 0.1   )) %>%   # Arrange matching candidates from more to less similar   arrange(id, -similarity)  okay_candidates %>% relocate(similarity) #> # A tibble: 19 × 11 #>    simil…¹    id compa…² postc…³ country misc_…⁴ compa…⁵ id_tilt compa…⁶ misc_…⁷ #>      <dbl> <dbl> <chr>   <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   #>  1   1         1 Peasan… 01234   germany A       peasan…       1 Peasan… A       #>  2   1         1 Peasan… 01234   germany A       peasan…       2 Peasan… Z       #>  3   0.879     1 Peasan… 01234   germany A       peasan…       4 Peasan… B       #>  4   1         2 Peasan… 01234   germany Z       peasan…       1 Peasan… A       #>  5   1         2 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       #>  6   0.879     2 Peasan… 01234   germany Z       peasan…       4 Peasan… B       #>  7   1         3 Peasan… 11234   germany Z       peasan…       3 Peasan… Z       #>  8   1         4 Peasan… 01234   germany Z       peasan…       4 Peasan… B       #>  9   0.879     4 Peasan… 01234   germany Z       peasan…       1 Peasan… A       #> 10   0.879     4 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       #> 11   0.844     5 Bread … 23456   germany C       breadb…       5 The Br… C       #> 12   1         6 Flower… 34567   germany Z       flower…       7 Flower… F       #> 13   0.933     6 Flower… 34567   germany Z       flower…       6 Flower… D       #> 14  NA         7 Screwd… 45678   germany D       screwd…      NA NA      NA      #> 15  NA         8 Screwd… 45678   germany Z       screwd…      NA NA      NA      #> 16   0.848     9 John M… 56789   germany E       johnme…       8 John a… E       #> 17  NA        10 John M… 55555   germany Y       johnme…      NA NA      NA      #> 18  NA        11 John M… 55555   norway  Y       johnme…      NA NA      NA      #> 19   0.548    12 Best B… 65656   france  F       bestba…      11 Cranes… F       #> # … with 1 more variable: company_alias_tilt <chr>, and abbreviated variable #> #   names ¹​similarity, ²​company_name, ³​postcode, ⁴​misc_info, ⁵​company_alias, #> #   ⁶​company_name_tilt, ⁷​misc_info_tilt"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"pick-best-candidates","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Pick best candidates","title":"tilt.company.match","text":"Empirically found candidates similarity threshold 0.75 likely false positives. Pick similarity values threshold drastically reduce number candidates ’ll need validate manually. believe benefit outweighs potential loss true positives. picking best candidates, companies loanbook might longer candidate tilt dataset.","code":"eligibility_threshold <- 0.75 best_candidates <- okay_candidates %>%   filter(similarity > eligibility_threshold | is.na(similarity)) unmatched <- anti_join(   okay_candidates %>% distinct(id, company_name),   best_candidates %>% distinct(id, company_name) ) #> Joining with `by = join_by(id, company_name)`  unmatched #> # A tibble: 1 × 2 #>      id company_name #>   <dbl> <chr>        #> 1    12 Best Bakers"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"suggest-matches","dir":"Articles","previous_headings":"1. In R (session 1)","what":"Suggest matches","title":"tilt.company.match","text":"Later ’ll need manually decide candidates true match. make job easier, can automatically make suggestions new column suggest_match. values suggest_match set TRUE value similarity meets conditions: ’s highest among candidates. ’s threshold 0.9. ’s highest value group defined combination company_name x postcode – avoid duplicates. rows value suggest_match automatically set NA. Also now create new column accept_match fill NA. Later ’ll edit column. Note even similarity 1 postcode can false positive. example, false positive: Now write dataset to_edit can explore spreadsheet editor. example, may write .csv .xlsx file open Excel GoogleSheets.","code":"# Decided upon extensive experience suggestion_threshold <- 0.9 candidates_suggest_match <- best_candidates %>%   # - It's the highest among all other candidates.   group_by(id) %>%   filter(similarity == max(similarity)) %>%   # - It's above the threshold.   filter(similarity > suggestion_threshold) %>%   # - It's the only such highest value in the group defined by a combination of   # `company_name` x `postcode` -- to avoid duplicates.   mutate(duplicates = any(duplicated_paste(company_name, postcode))) %>%   filter(!duplicates) %>%   select(id, id_tilt) %>%   mutate(suggest_match = TRUE) %>%   ungroup() to_edit <- best_candidates %>%   left_join(candidates_suggest_match, by = c(\"id\", \"id_tilt\")) %>%   mutate(accept_match = NA)  to_edit %>% relocate(similarity, suggest_match) #> # A tibble: 18 × 13 #>    simil…¹ sugge…²    id compa…³ postc…⁴ country misc_…⁵ compa…⁶ id_tilt compa…⁷ #>      <dbl> <lgl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   #>  1   1     NA          1 Peasan… 01234   germany A       peasan…       1 Peasan… #>  2   1     NA          1 Peasan… 01234   germany A       peasan…       2 Peasan… #>  3   0.879 NA          1 Peasan… 01234   germany A       peasan…       4 Peasan… #>  4   1     NA          2 Peasan… 01234   germany Z       peasan…       1 Peasan… #>  5   1     NA          2 Peasan… 01234   germany Z       peasan…       2 Peasan… #>  6   0.879 NA          2 Peasan… 01234   germany Z       peasan…       4 Peasan… #>  7   1     TRUE        3 Peasan… 11234   germany Z       peasan…       3 Peasan… #>  8   1     TRUE        4 Peasan… 01234   germany Z       peasan…       4 Peasan… #>  9   0.879 NA          4 Peasan… 01234   germany Z       peasan…       1 Peasan… #> 10   0.879 NA          4 Peasan… 01234   germany Z       peasan…       2 Peasan… #> 11   0.844 NA          5 Bread … 23456   germany C       breadb…       5 The Br… #> 12   1     TRUE        6 Flower… 34567   germany Z       flower…       7 Flower… #> 13   0.933 NA          6 Flower… 34567   germany Z       flower…       6 Flower… #> 14  NA     NA          7 Screwd… 45678   germany D       screwd…      NA NA      #> 15  NA     NA          8 Screwd… 45678   germany Z       screwd…      NA NA      #> 16   0.848 NA          9 John M… 56789   germany E       johnme…       8 John a… #> 17  NA     NA         10 John M… 55555   germany Y       johnme…      NA NA      #> 18  NA     NA         11 John M… 55555   norway  Y       johnme…      NA NA      #> # … with 3 more variables: misc_info_tilt <chr>, company_alias_tilt <chr>, #> #   accept_match <lgl>, and abbreviated variable names ¹​similarity, #> #   ²​suggest_match, ³​company_name, ⁴​postcode, ⁵​misc_info, ⁶​company_alias, #> #   ⁷​company_name_tilt to_edit %>%   filter(id == 4, id_tilt == 4) %>%   select(suggest_match, similarity, postcode, matches(\"misc_info\")) #> # A tibble: 1 × 5 #>   suggest_match similarity postcode misc_info misc_info_tilt #>   <lgl>              <dbl> <chr>    <chr>     <chr>          #> 1 TRUE                   1 01234    Z         B # You can install the readr package with: `install.packages(\"readr\")` write_csv(to_edit, \"to_edit.csv\", show_col_types = FALSE)  # Or, you can install the writexl package with: `install.packages(\"writexl\")` writexl::write_xlsx(to_edit, \"to_edit.xlsx\")"},{"path":[]},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"accept-or-reject-matches","dir":"Articles","previous_headings":"2. In a spreadsheet editor","what":"Accept or reject matches","title":"tilt.company.match","text":"Import dataset to_edit spreadsheet editor like Excel GoogleSheets. row decide want reject accept suggested match. default row rejected. accept type TRUE column accept_match. Save edited file later use R, example e.g. “edited.csv”.","code":""},{"path":[]},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"use-r-packages-and-read-data","dir":"Articles","previous_headings":"3. In R (session 2)","what":"Use R packages and read data","title":"tilt.company.match","text":"Restart R ensure nothing previous R session affects one. Use required packages section. Read “edited.csv” file, loanbook.","code":"library(dplyr, warn.conflicts = FALSE) library(tilt.company.match) # TODO: Replace with the path/to/your/real/edited.csv edited_csv <- example_file(\"demo_matched.csv\") edited_csv #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_matched.csv\"  edited <- read_csv(edited_csv, show_col_types = FALSE) edited #> # A tibble: 18 × 13 #>       id compa…¹ postc…² country misc_…³ compa…⁴ id_tilt compa…⁵ misc_…⁶ compa…⁷ #>    <dbl> <chr>   <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   #>  1     1 Peasan… 01234   germany A       peasan…       1 Peasan… A       peasan… #>  2     1 Peasan… 01234   germany A       peasan…       2 Peasan… Z       peasan… #>  3     1 Peasan… 01234   germany A       peasan…       4 Peasan… B       peasan… #>  4     2 Peasan… 01234   germany Z       peasan…       1 Peasan… A       peasan… #>  5     2 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #>  6     2 Peasan… 01234   germany Z       peasan…       4 Peasan… B       peasan… #>  7     3 Peasan… 11234   germany Z       peasan…       3 Peasan… Z       peasan… #>  8     4 Peasan… 01234   germany Z       peasan…       4 Peasan… B       peasan… #>  9     4 Peasan… 01234   germany Z       peasan…       1 Peasan… A       peasan… #> 10     4 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #> 11     5 Bread … 23456   germany C       breadb…       5 The Br… C       thebre… #> 12     6 Flower… 34567   germany Z       flower…       7 Flower… F       flower… #> 13     6 Flower… 34567   germany Z       flower…       6 Flower… D       flower… #> 14     7 Screwd… 45678   germany D       screwd…      NA NA      NA      NA      #> 15     8 Screwd… 45678   germany Z       screwd…      NA NA      NA      NA      #> 16     9 John M… 56789   germany E       johnme…       8 John a… E       johnja… #> 17    10 John M… 55555   germany Y       johnme…      NA NA      NA      NA      #> 18    11 John M… 55555   norway  Y       johnme…      NA NA      NA      NA      #> # … with 3 more variables: string_sim <dbl>, suggest_match <lgl>, #> #   accept_match <lgl>, and abbreviated variable names ¹​company_name, #> #   ²​postcode, ³​misc_info, ⁴​company_alias, ⁵​company_name_tilt, ⁶​misc_info_tilt, #> #   ⁷​company_alias_tilt  # TODO: Replace with the path/to/your/real/loanbook.csv loanbook_csv <- example_file(\"demo_loanbook.csv\") loanbook_csv #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_loanbook.csv\"  loanbook <- read_csv(loanbook_csv, show_col_types = FALSE) loanbook #> # A tibble: 12 × 5 #>       id company_name           postcode country misc_info #>    <dbl> <chr>                  <chr>    <chr>   <chr>     #>  1     1 Peasant Peter          01234    germany A         #>  2     2 Peasant Peter          01234    germany Z         #>  3     3 Peasant Peter          11234    germany Z         #>  4     4 Peasant Paul           01234    germany Z         #>  5     5 Bread Bakers Limited   23456    germany C         #>  6     6 Flower Power & Company 34567    germany Z         #>  7     7 Screwdriver Experts    45678    germany D         #>  8     8 Screwdriver Expert     45678    germany Z         #>  9     9 John Meier's Groceries 56789    germany E         #> 10    10 John Meier's Groceries 55555    germany Y         #> 11    11 John Meier's Groceries 55555    norway  Y         #> 12    12 Best Bakers            65656    france  F"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"check-the-edited-dataset","dir":"Articles","previous_headings":"3. In R (session 2)","what":"Check the edited dataset","title":"tilt.company.match","text":"Manual work prone errors. Check edited dataset ensure ’s correct: Use report_no_matches() explore companies loanbook didn’t match company tilt dataset. Use check_duplicated_relation() check company loanbook matched one company tilt dataset reverse. bad data get informative errors. edited dataset wrong, go back spreadsheet editor (.e. repeat step 2), fix , check (.e. repeat step 3).","code":"not_matched <- loanbook %>% report_no_matches(edited) #> Joining with `by = join_by(id, company_name, postcode, country, misc_info)` #> Companies not matched in the loanbook by the tilt data set: Peasant Paul Bread #> Bakers Limited Screwdriver Experts Screwdriver Expert John Meier's Groceries #> John Meier's Groceries John Meier's Groceries Best Bakers ℹ Did you match these #> companies manually correctly ? not_matched #> # A tibble: 8 × 2 #>   company_name              id #>   <chr>                  <dbl> #> 1 Peasant Paul               4 #> 2 Bread Bakers Limited       5 #> 3 Screwdriver Experts        7 #> 4 Screwdriver Expert         8 #> 5 John Meier's Groceries     9 #> 6 John Meier's Groceries    10 #> 7 John Meier's Groceries    11 #> 8 Best Bakers               12 # Good edited %>% check_duplicated_relation() #> No duplicated matches found in the data. # Bad: A single loanbook-company can't match multiple tilt-companies bad_edited <- edited %>%   mutate(accept_match = if_else(id %in% c(1, 2), TRUE, accept_match)) bad_edited %>% filter(id %in% c(1, 2)) #> # A tibble: 6 × 13 #>      id compan…¹ postc…² country misc_…³ compa…⁴ id_tilt compa…⁵ misc_…⁶ compa…⁷ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   #> 1     1 Peasant… 01234   germany A       peasan…       1 Peasan… A       peasan… #> 2     1 Peasant… 01234   germany A       peasan…       2 Peasan… Z       peasan… #> 3     1 Peasant… 01234   germany A       peasan…       4 Peasan… B       peasan… #> 4     2 Peasant… 01234   germany Z       peasan…       1 Peasan… A       peasan… #> 5     2 Peasant… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #> 6     2 Peasant… 01234   germany Z       peasan…       4 Peasan… B       peasan… #> # … with 3 more variables: string_sim <dbl>, suggest_match <lgl>, #> #   accept_match <lgl>, and abbreviated variable names ¹​company_name, #> #   ²​postcode, ³​misc_info, ⁴​company_alias, ⁵​company_name_tilt, ⁶​misc_info_tilt, #> #   ⁷​company_alias_tilt  bad_edited %>%   check_duplicated_relation() %>%   try() #> Error in check_duplicated_relation(.) :  #>   Duplicated match of company in loanbook detected. #> Duplicated company name: Peasant Peter, id: 1. #> Duplicated company name: Peasant Peter, id: 2. #> Company names where `accept_match` is `TRUE` must be unique by `id`. #> Have you ensured that only one tilt-id per loanbook-id is set to `TRUE`?  # Bad: Multiple loanbook-companies can't match a single tilt-company bad_edited2 <- demo_matched %>%   filter(id_tilt == 3) %>%   mutate(id = 12) %>%   bind_rows(demo_matched) bad_edited2 %>%   filter(accept_match == TRUE & id_tilt == 3) #> # A tibble: 2 × 13 #>      id compan…¹ postc…² country misc_…³ compa…⁴ id_tilt compa…⁵ misc_…⁶ compa…⁷ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   #> 1    12 Peasant… 11234   germany Z       peasan…       3 Peasan… Z       peasan… #> 2     3 Peasant… 11234   germany Z       peasan…       3 Peasan… Z       peasan… #> # … with 3 more variables: string_sim <dbl>, suggest_match <lgl>, #> #   accept_match <lgl>, and abbreviated variable names ¹​company_name, #> #   ²​postcode, ³​misc_info, ⁴​company_alias, ⁵​company_name_tilt, ⁶​misc_info_tilt, #> #   ⁷​company_alias_tilt  bad_edited2 %>%   check_duplicated_relation() %>%   try() #> Error in check_duplicated_relation(.) :  #>   Duplicated match of company from tilt db detected. #> ✖ Duplicated tilt company name: Peasant Peter, tilt id: 3. #> ℹ Have you ensured that each tilt-id is set to `TRUE` for maximum 1 company from the loanbook?"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/articles/tilt-company-match.html","id":"pick-the-matching-companies","dir":"Articles","previous_headings":"3. In R (session 2)","what":"Pick the matching companies","title":"tilt.company.match","text":"edited dataset correct, pick matching companies ’re done. final dataset many rows number TRUE values accept_match columns edited dataset. need use final dataset elsewhere, may write .csv file like :","code":"edited %>% count(accept_match) #> # A tibble: 2 × 2 #>   accept_match     n #>   <lgl>        <int> #> 1 TRUE             4 #> 2 NA              14  final <- edited %>% filter(accept_match) final #> # A tibble: 4 × 13 #>      id compan…¹ postc…² country misc_…³ compa…⁴ id_tilt compa…⁵ misc_…⁶ compa…⁷ #>   <dbl> <chr>    <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   #> 1     1 Peasant… 01234   germany A       peasan…       1 Peasan… A       peasan… #> 2     2 Peasant… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #> 3     3 Peasant… 11234   germany Z       peasan…       3 Peasan… Z       peasan… #> 4     6 Flower … 34567   germany Z       flower…       7 Flower… F       flower… #> # … with 3 more variables: string_sim <dbl>, suggest_match <lgl>, #> #   accept_match <lgl>, and abbreviated variable names ¹​company_name, #> #   ²​postcode, ³​misc_info, ⁴​company_alias, ⁵​company_name_tilt, ⁶​misc_info_tilt, #> #   ⁷​company_alias_tilt # You can install the readr package with: `install.packages(\"readr\")` final %>% write_csv(\"final.csv\", show_col_types = FALSE)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mirja Hollmann. Author, maintainer. Linda Delacombaz. Author. 2 Degrees Investing Initiative. Copyright holder, funder.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hollmann M, Delacombaz L (2023). tilt.company.match: Helpers Company Name Matching 'TILT' Project. R package version 0.0.0.9001, https://2degreesinvesting.github.io/tilt.company.match/.","code":"@Manual{,   title = {tilt.company.match: Helpers for Company Name Matching in the 'TILT' Project},   author = {Mirja Hollmann and Linda Delacombaz},   year = {2023},   note = {R package version 0.0.0.9001},   url = {https://2degreesinvesting.github.io/tilt.company.match/}, }"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"tiltcompanymatch","dir":"","previous_headings":"","what":"Helpers for Company Name Matching in the TILT Project","title":"Helpers for Company Name Matching in the TILT Project","text":"goal tilt.company.match provide helpers company name matching tilt-project.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helpers for Company Name Matching in the TILT Project","text":"can install development version tilt.company.match GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"2DegreesInvesting/tilt.company.match\")"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"matching-loanbooks-to-the-tilt-database","dir":"","previous_headings":"","what":"Matching loanbooks to the tilt database","title":"Helpers for Company Name Matching in the TILT Project","text":"matching problem characterised follows: matching companies banks` loanbooks tilt face problems inconsistent company names (typos, conventions…) expected postcode available relatively reliable additional information companies companies loanbooks tilt db (thus match) match companies provided loanbook companies tilt database expect loanbook dataframe tilt db dataframe hold least columns company_name, postcode country column id holding unique row identifiers. columns educate decisions made humans matching process may present. example compare demo data .","code":"library(tilt.company.match) #> Loading required package: stringdist knitr::kable(head(demo_loanbook))"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"pre-matching-functions-to-check-the-data","dir":"","previous_headings":"Matching loanbooks to the tilt database","what":"Pre-matching functions to check the data","title":"Helpers for Company Name Matching in the TILT Project","text":"order run matching process optimally, useful functions check data matching process.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"check-crucial-columns-names","dir":"","previous_headings":"Matching loanbooks to the tilt database > Pre-matching functions to check the data","what":"Check crucial columns names","title":"Helpers for Company Name Matching in the TILT Project","text":"crucial right columns’ names loanbook, exactly like demo_loanbook. function check loanbook necessary names, declared “crucial_names”. Now, let us rename loanbook “country” column “countries” “company_name” “Company Name”. un-comment (remove hashtag) line, throws error. error loanbook, can rename loanbook columns, using dplyr::rename() function, perform sanity check just .","code":"loanbook <- demo_loanbook crucial_names <- c(\"id\", \"company_name\", \"postcode\", \"country\") check_crucial_names(loanbook, crucial_names) wrongly_named_loanbook <- loanbook %>%   dplyr::rename(     \"countries\" = \"country\",     \"Company Name\" = \"company_name\"   )  # un-comment this line to have the error # check_crucial_names(wrongly_named_loanbook, crucial_names) corrected_loanbook <- wrongly_named_loanbook %>%   dplyr::rename(     \"country\" = \"countries\",     \"company_name\" = \"Company Name\"   )  check_crucial_names(corrected_loanbook, crucial_names)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"report-duplicates","dir":"","previous_headings":"Matching loanbooks to the tilt database > Pre-matching functions to check the data","what":"Report duplicates","title":"Helpers for Company Name Matching in the TILT Project","text":"function report_duplicates shows whether duplicates columns interest. case, strongly suggest duplicates company_name, postcode country columns combination. strongly encourage use loanbook data set. Note: example see, duplicate rows columns company_name, postcode, country seem belong different companies need fix loanbook.","code":"loanbook <- demo_loanbook columns <- c(\"company_name\", \"postcode\", \"country\")  report_duplicates(loanbook, columns) #> Found duplicate(s) on columns company_name, postcode, country of the data set. #> ✖ Found for the company Peasant Peter, postcode: 01234, country: germany #> ℹ Please check if these duplicates are intended and have an unique id."},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"report-missing-values","dir":"","previous_headings":"Matching loanbooks to the tilt database > Pre-matching functions to check the data","what":"Report missing values","title":"Helpers for Company Name Matching in the TILT Project","text":"Missing values NAs ideally loanbook. function abort_if_incomplete() checks many NAs columns data set report user. , loanbook data set NAs. columns (currently id company_name) allow missings. case missings columns report_missings() throw error. removed affected rows data. columns, e.g. postcode missings reported information purposes. However require action user side.","code":"abort_if_incomplete(demo_loanbook) # missings on a non-crucial column missing_non_crucial <- demo_loanbook %>%    dplyr::mutate(postcode = dplyr::if_else(id == 1, NA_character_, .data$postcode))  missing_non_crucial %>%    abort_if_incomplete(non_nullable_cols = c(\"id\", \"company_name\"))  # missings on a crucial column missing_crucial <- demo_loanbook %>%    dplyr::mutate(company_name = dplyr::if_else(id == 1, NA_character_, .data$postcode))  missing_crucial %>%    abort_if_incomplete(non_nullable_cols = c(\"id\", \"company_name\")) #> Error in `abort_if_incomplete()`: #> ! Non-nullable columns must not have `NA`s. #> ✖ Columns to review: company_name"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"preprocessing","dir":"","previous_headings":"Matching loanbooks to the tilt database","what":"Preprocessing","title":"Helpers for Company Name Matching in the TILT Project","text":"first step, company_names preprocessed reduce noise increase consistency. end use function called to_alias(). assign result preprocessing new column company_alias.","code":"loanbook <- demo_loanbook %>%   dplyr::mutate(company_alias = to_alias(company_name))  knitr::kable(head(loanbook)) tilt <- demo_tilt %>%   dplyr::mutate(company_alias = to_alias(company_name))  knitr::kable(head(tilt))"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"deriving-candidates","dir":"","previous_headings":"Matching loanbooks to the tilt database","what":"Deriving Candidates","title":"Helpers for Company Name Matching in the TILT Project","text":"identify entries tilt db match companies loanbook, identify first step companies matching country postcode. based assumptions postcodes correct stable. One can see e.g. company loanbook id 1 3 potential matches tilt db postcode (tilt id 1, 2, 4). Next, calculating string similarity aliased company name loanbook aliased company names tilt db postcode ordering descending proximity. complete similarity corresponds 1, complete dissimilarity corresponds 0. several string similarity metrics available stringdist-package. Depending nature generation modality text different metrics perform best. current problem Jaro-Winkler metric prefix factor 0.1 chosen. metric tends suitable comparing human typed text might typos. Based empiric research decided remove match candidates similarity certain threshold. helps drastically reduce number candidates, making data easier process human. Note , rare cases, might loose matches way, since candidates removed due lower threshold longer included matching. concluded improved ease use justifies edge cases. Companies candidates filtering lower threshold reported.","code":"loanbook_with_candidates <- loanbook %>%   dplyr::left_join(tilt, by = c(\"country\", \"postcode\"), suffix = c(\"\", \"_tilt\")) #> Warning in dplyr::left_join(., tilt, by = c(\"country\", \"postcode\"), suffix = c(\"\", : Each row in `x` is expected to match at most 1 row in `y`. #> ℹ Row 1 of `x` matches multiple rows. #> ℹ If multiple matches are expected, set `multiple = \"all\"` to silence this #>   warning.  knitr::kable(head(loanbook_with_candidates)) loanbook_with_candidates_and_dist <- loanbook_with_candidates %>%   dplyr::mutate(string_sim = stringdist::stringsim(a = .data$company_alias, b = .data$company_alias_tilt, method = \"jw\", p = 0.1)) %>%   dplyr::arrange(id, -string_sim)  knitr::kable(loanbook_with_candidates_and_dist) min_threshold <- 0.75  loanbook_with_candidates_and_dist_filtered <- loanbook_with_candidates_and_dist %>%    dplyr::filter(is.na(string_sim) | string_sim > min_threshold) before_filter_id_and_company <- loanbook_with_candidates_and_dist %>%    dplyr::select(id, company_name) %>%    dplyr::distinct_all()  after_filter_id_and_company <- loanbook_with_candidates_and_dist_filtered %>%    dplyr::select(id, company_name) %>%    dplyr::distinct_all()  lost_companies <- before_filter_id_and_company %>%    dplyr::anti_join(after_filter_id_and_company) #> Joining with `by = join_by(id, company_name)`  knitr::kable(lost_companies)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"selecting-matches","dir":"","previous_headings":"","what":"Selecting matches","title":"Helpers for Company Name Matching in the TILT Project","text":"order make work human working matching easy possible can automated automated. However correct matching essential project success incorrect matches, ultimately ruled matching automatically acceptable. consequence now following workflow suggested. human coder inspect data. advisable spreadsheet application. row selected match setting column accept_match TRUE. support column suggest_match provided. suggest_match column set TRUE : match determined threshold. highest match matches. 1 highest match per company_name x id combination avoid duplicates. Notes: Even match 1 postcode can rare cases False positive, compare e.g. company 4 (“Peasant Paul”) example data. want automatically approve unique matches may cases multiple companies ZIP code name. cases, additional information (example, sector, street name, main activity etc.) can help make final decision.","code":"highest_matches_per_company <- loanbook_with_candidates_and_dist_filtered %>%   dplyr::group_by(id) %>%   dplyr::filter(string_sim == max(string_sim))  threshold <- 0.9 # Threshold decided upon extensive experience with r2dii.match function and processes  highest_matches_per_company_above_thresh <- highest_matches_per_company %>%   dplyr::filter(string_sim > threshold)  highest_matches_per_company_above_thresh_wo_duplicates <- highest_matches_per_company_above_thresh %>%   dplyr::mutate(duplicates = any(duplicated_paste(company_name, postcode))) %>%   dplyr::filter(duplicates == FALSE) %>%   dplyr::select(id, id_tilt) %>%   dplyr::mutate(suggest_match = TRUE)  loanbook_with_candidates_and_dist_and_suggestion <- loanbook_with_candidates_and_dist_filtered %>%   dplyr::left_join(highest_matches_per_company_above_thresh_wo_duplicates, by = c(\"id\", \"id_tilt\")) %>%   dplyr::mutate(accept_match = NA)  knitr::kable(loanbook_with_candidates_and_dist_and_suggestion)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"check-matching-process","dir":"","previous_headings":"Selecting matches","what":"Check matching process","title":"Helpers for Company Name Matching in the TILT Project","text":"matched manually companies, can check companies matched loanbook. can used ‘double-check’ see two data sets correctly manually matched. demo-matched data set example data set look like manually checked: accept_match column now changed TRUE NA, depending whether company matched .","code":"manually_matched <- demo_matched  knitr::kable(manually_matched)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"report-companies-with-no-matches","dir":"","previous_headings":"Selecting matches","what":"Report companies with no matches","title":"Helpers for Company Name Matching in the TILT Project","text":"can use report_no_matches function determine companies loanbook match selected found.","code":"not_matched <- report_no_matches(loanbook, manually_matched) #> Joining with `by = join_by(id, company_name, postcode, country, misc_info, #> company_alias)` #> Companies not matched in the loanbook by the tilt data set: Peasant Paul Bread #> Bakers Limited Screwdriver Experts Screwdriver Expert John Meier's Groceries #> John Meier's Groceries John Meier's Groceries Best Bakers ℹ Did you match these #> companies manually correctly ?  knitr::kable(not_matched)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/index.html","id":"report-duplicate-matches","dir":"","previous_headings":"Selecting matches","what":"Report duplicate matches","title":"Helpers for Company Name Matching in the TILT Project","text":"check manual errors manual matching process, can use check_duplicated_relation function. checks company loanbook matched > 1 company tilt dataset reverse. , demo_matched data set hand-matched correctly: column accept_match manually changed verified. function throw error inform duplicates found. Now let us insert duplicated matches company ids 1 2. function abort throws error lines duplicated rows. Also, error thrown insert duplicate match company tilt db loanbook.","code":"manually_matched <- demo_matched  knitr::kable(manually_matched) check_duplicated_relation(manually_matched) #> No duplicated matches found in the data. duplicate_in_loanbook <- manually_matched %>%   dplyr::mutate(accept_match = dplyr::if_else(id %in% c(1, 2), TRUE, accept_match))  knitr::kable(duplicate_in_loanbook %>% dplyr::filter(id %in% c(1, 2))) # un-comment this line to have the error # check_duplicated_relation(duplicate_in_loanbook) duplicate_tilt_id_row <- demo_matched %>%   dplyr::filter(id_tilt == 3) %>%   dplyr::mutate(id = 12) duplicate_tilt_id <- dplyr::bind_rows(demo_matched, duplicate_tilt_id_row)  knitr::kable(duplicate_tilt_id %>% dplyr::filter(accept_match == TRUE & id_tilt == 3)) # un-comment this line to have the error # check_duplicated_relation(duplicate_tilt_id)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/abort_if_incomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","title":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","text":"Aborts data missing values non-nullable columns","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/abort_if_incomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","text":"","code":"abort_if_incomplete(data, non_nullable_cols = names(data))"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/abort_if_incomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","text":"data Tibble holding result data set. non_nullable_cols character vector holding names columns NAs allowed.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/abort_if_incomplete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","text":"Input data invisibly.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/abort_if_incomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aborts when data has missing values on non-nullable columns — abort_if_incomplete","text":"","code":"data <- tibble::tibble(x = NA, y = 1, z = NA)  # With NA in nullable columns returns data invisibly data %>% abort_if_incomplete(non_nullable_cols = \"y\") out <- data %>% abort_if_incomplete(non_nullable_cols = \"y\") identical(out, data) #> [1] TRUE  # With NA in one nullable column, alerts the column to review as an error data %>%   abort_if_incomplete(non_nullable_cols = c(\"x\", \"y\")) %>%   try() #> Error in abort_if_incomplete(., non_nullable_cols = c(\"x\", \"y\")) :  #>   Non-nullable columns must not have `NA`s. #> ✖ Columns to review: x  # By default, it takes all columns as non-nullable data %>%   abort_if_incomplete() %>%   try() #> Error in abort_if_incomplete(.) :  #>   Non-nullable columns must not have `NA`s. #> ✖ Columns to review: x, z"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_crucial_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a named object contains expected names — check_crucial_names","title":"Check if a named object contains expected names — check_crucial_names","text":"Based fgeo.tool::check_crucial_names()","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_crucial_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a named object contains expected names — check_crucial_names","text":"","code":"check_crucial_names(x, expected_names)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_crucial_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a named object contains expected names — check_crucial_names","text":"x named object. expected_names String; expected names x.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_crucial_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a named object contains expected names — check_crucial_names","text":"Invisible x, error informative message. Adapted : https://github.com/RMI-PACTA/r2dii.match/blob/main/R/check_crucial_names.R","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_crucial_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a named object contains expected names — check_crucial_names","text":"","code":"x <- c(a = 1) check_crucial_names(x, \"a\") try(check_crucial_names(x, \"bad\")) #> Error in abort_missing_names(sort(setdiff(expected_names, names(x)))) :  #>   Must have missing names: #> `bad`"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_duplicated_relation.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports duplicates from manual matching outcome — check_duplicated_relation","title":"Reports duplicates from manual matching outcome — check_duplicated_relation","text":"Function throws descriptive error company loanbook matched > 1 company tilt db reverse.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_duplicated_relation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports duplicates from manual matching outcome — check_duplicated_relation","text":"","code":"check_duplicated_relation(manually_matched)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_duplicated_relation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports duplicates from manual matching outcome — check_duplicated_relation","text":"manually_matched Tibble holding result matching process, user manually verified matched results","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/check_duplicated_relation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports duplicates from manual matching outcome — check_duplicated_relation","text":"Input manually_matched","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_loanbook.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo loanbook entries — demo_loanbook","title":"Demo loanbook entries — demo_loanbook","text":"simplified demo tilt company data set illustrate test matching loanbook. details included cases please refer data generation script.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_loanbook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo loanbook entries — demo_loanbook","text":"","code":"demo_loanbook"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_loanbook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo loanbook entries — demo_loanbook","text":"tibble 11 rows 5 variables: id numeric id company_name name company postcode postcode company country country name lowercase misc_info placeholder column holds additional information human matchers consider matching","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_loanbook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo loanbook entries — demo_loanbook","text":"","code":"demo_loanbook #> # A tibble: 12 × 5 #>       id company_name           postcode country misc_info #>    <dbl> <chr>                  <chr>    <chr>   <chr>     #>  1     1 Peasant Peter          01234    germany A         #>  2     2 Peasant Peter          01234    germany Z         #>  3     3 Peasant Peter          11234    germany Z         #>  4     4 Peasant Paul           01234    germany Z         #>  5     5 Bread Bakers Limited   23456    germany C         #>  6     6 Flower Power & Company 34567    germany Z         #>  7     7 Screwdriver Experts    45678    germany D         #>  8     8 Screwdriver Expert     45678    germany Z         #>  9     9 John Meier's Groceries 56789    germany E         #> 10    10 John Meier's Groceries 55555    germany Y         #> 11    11 John Meier's Groceries 55555    norway  Y         #> 12    12 Best Bakers            65656    france  F"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_matched.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo matched db entries — demo_matched","title":"Demo matched db entries — demo_matched","text":"simplified demo matched company data set illustrate manual matching process loanbook. details included cases please refer data generation script.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_matched.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo matched db entries — demo_matched","text":"","code":"demo_matched"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_matched.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo matched db entries — demo_matched","text":"tibble 9 rows 5 variables: id numeric id company_name name company postcode postcode company country country name lowercase misc_info placeholder column holds additional information human matchers consider matching company_alias name company, preprocessed id_tilt numeric id tilt db company_name_tilt name company misc_info_tilt placeholder column holds additional information human matchers consider matching company_alias_tilt name company, preprocessed string_sim string similarity aliased company name loanbook aliase company name tilt db suggest_match set TRUE string_sim certain threshold accept_match manual decision whether company loanbook matches comapny tilt db","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_matched.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo matched db entries — demo_matched","text":"","code":"demo_matched #> # A tibble: 18 × 13 #>       id compa…¹ postc…² country misc_…³ compa…⁴ id_tilt compa…⁵ misc_…⁶ compa…⁷ #>    <dbl> <chr>   <chr>   <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   #>  1     1 Peasan… 01234   germany A       peasan…       1 Peasan… A       peasan… #>  2     1 Peasan… 01234   germany A       peasan…       2 Peasan… Z       peasan… #>  3     1 Peasan… 01234   germany A       peasan…       4 Peasan… B       peasan… #>  4     2 Peasan… 01234   germany Z       peasan…       1 Peasan… A       peasan… #>  5     2 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #>  6     2 Peasan… 01234   germany Z       peasan…       4 Peasan… B       peasan… #>  7     3 Peasan… 11234   germany Z       peasan…       3 Peasan… Z       peasan… #>  8     4 Peasan… 01234   germany Z       peasan…       4 Peasan… B       peasan… #>  9     4 Peasan… 01234   germany Z       peasan…       1 Peasan… A       peasan… #> 10     4 Peasan… 01234   germany Z       peasan…       2 Peasan… Z       peasan… #> 11     5 Bread … 23456   germany C       breadb…       5 The Br… C       thebre… #> 12     6 Flower… 34567   germany Z       flower…       7 Flower… F       flower… #> 13     6 Flower… 34567   germany Z       flower…       6 Flower… D       flower… #> 14     7 Screwd… 45678   germany D       screwd…      NA NA      NA      NA      #> 15     8 Screwd… 45678   germany Z       screwd…      NA NA      NA      NA      #> 16     9 John M… 56789   germany E       johnme…       8 John a… E       johnja… #> 17    10 John M… 55555   germany Y       johnme…      NA NA      NA      NA      #> 18    11 John M… 55555   norway  Y       johnme…      NA NA      NA      NA      #> # … with 3 more variables: string_sim <dbl>, suggest_match <lgl>, #> #   accept_match <lgl>, and abbreviated variable names ¹​company_name, #> #   ²​postcode, ³​misc_info, ⁴​company_alias, ⁵​company_name_tilt, ⁶​misc_info_tilt, #> #   ⁷​company_alias_tilt"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_tilt.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo tilt db entries — demo_tilt","title":"Demo tilt db entries — demo_tilt","text":"simplified demo tilt company data set illustrate test matching loanbook. details included cases please refer data generation script.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_tilt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo tilt db entries — demo_tilt","text":"","code":"demo_tilt"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_tilt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo tilt db entries — demo_tilt","text":"tibble 9 rows 5 variables: id numeric id company_name name company postcode postcode company country country name lowercase misc_info placeholder column holds additional information human matchers consider matching","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/demo_tilt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo tilt db entries — demo_tilt","text":"","code":"demo_tilt #> # A tibble: 11 × 5 #>       id company_name                 postcode country misc_info #>    <dbl> <chr>                        <chr>    <chr>   <chr>     #>  1     1 Peasant Peter                01234    germany A         #>  2     2 Peasant Peter                01234    germany Z         #>  3     3 Peasant Peter                11234    germany Z         #>  4     4 Peasant Paul                 01234    germany B         #>  5     5 The Bread Bakers Ltd         23456    germany C         #>  6     6 Flower Power Friends and Co. 34567    germany D         #>  7     7 Flower Power and Co.         34567    germany F         #>  8     8 John and Jacques Groceries   56789    germany E         #>  9     9 John and Jacques Groceries   98765    germany E         #> 10    10 John and Jacques Groceries   98765    france  E         #> 11    11 Cranes and Friends           65656    france  F"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/duplicated_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect duplicated strings — duplicated_paste","title":"Detect duplicated strings — duplicated_paste","text":"Detect duplicated strings","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/duplicated_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect duplicated strings — duplicated_paste","text":"","code":"duplicated_paste(...)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/duplicated_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect duplicated strings — duplicated_paste","text":"... Arguments passed base::paste sep character string separate terms.      NA_character_. collapse optional character string separate results.      NA_character_. recycle0 logical indicating zero-length     character arguments lead zero-length     character(0) sep-phase (turns     \"\" collapse-phase, .e., collapse     NULL).","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/duplicated_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect duplicated strings — duplicated_paste","text":"logical vector length longest vector passed ....","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/duplicated_paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect duplicated strings — duplicated_paste","text":"","code":"duplicated_paste(c(\"a\", \"a\"), 1:2) #> [1] FALSE FALSE paste(c(\"a\", \"a\"), 1:2) #> [1] \"a 1\" \"a 2\"  duplicated_paste(c(\"a\", \"a\"), c(1, 1)) #> [1] FALSE  TRUE paste(c(\"a\", \"a\"), c(1, 1)) #> [1] \"a 1\" \"a 1\""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to an example file — example_file","title":"Get the path to an example file — example_file","text":"Get path example file","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to an example file — example_file","text":"","code":"example_file(file)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to an example file — example_file","text":"file Name file.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to an example file — example_file","text":"path.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path to an example file — example_file","text":"","code":"example_file(\"demo_loanbook.csv\") #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_loanbook.csv\"  example_file(\"demo_tilt.csv\") #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_tilt.csv\"  example_file(\"demo_matched.csv\") #> [1] \"/home/runner/work/_temp/Library/tilt.company.match/extdata/demo_matched.csv\""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/from_name_to_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"From name to alias — from_name_to_alias","title":"From name to alias — from_name_to_alias","text":"Function outputs table giving default strings used convert name alias. may amend table pass to_alias() via from_to argument.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/from_name_to_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From name to alias — from_name_to_alias","text":"","code":"from_name_to_alias()"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/from_name_to_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From name to alias — from_name_to_alias","text":"tibble::tibble columns .","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/from_name_to_alias.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"From name to alias — from_name_to_alias","text":"Source: @jdhoffa https://github.com/RMI-PACTA/r2dii.dataraw/pull/8","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Report duplicate rows — report_duplicates","title":"Report duplicate rows — report_duplicates","text":"Reports duplicates data columns cols. specifically, interested case company_name, postcode country columns. Duplicates reported via warning.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report duplicate rows — report_duplicates","text":"","code":"report_duplicates(data, cols)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report duplicate rows — report_duplicates","text":"data Tibble holding result data set. cols Vector columns names want test duplicates .","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_no_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports companies that were not matched in the loanbook — report_no_matches","title":"Reports companies that were not matched in the loanbook — report_no_matches","text":"Reports companies matched loanbook","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_no_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports companies that were not matched in the loanbook — report_no_matches","text":"","code":"report_no_matches(loanbook, manually_matched)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_no_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports companies that were not matched in the loanbook — report_no_matches","text":"loanbook Loanbook data set manually_matched Tibble holding result matching process, user manually selected matched companies loanbook tilt data set.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/report_no_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports companies that were not matched in the loanbook — report_no_matches","text":"not_matched_companies Tibble holding id company name companies matched tilt data set.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/tilt.company.match-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tilt.company.match: Helpers for Company Name Matching in the 'TILT' Project — tilt.company.match-package","title":"tilt.company.match: Helpers for Company Name Matching in the 'TILT' Project — tilt.company.match-package","text":"Hlpers company matching 'TILT' project. details please refer README.","code":""},{"path":[]},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/tilt.company.match-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tilt.company.match: Helpers for Company Name Matching in the 'TILT' Project — tilt.company.match-package","text":"Maintainer: Mirja Hollmann mirja@2degrees-investing.org Authors: Linda Delacombaz linda@2degrees-investing.org contributors: 2 Degrees Investing Initiative contact@2degrees-investing.org [copyright holder, funder]","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign an additional name to an entity — to_alias","title":"Assign an additional name to an entity — to_alias","text":"to_alias() takes character vector creates alias transforming input () lower case; (b) latin-ascii characters; (c) standard abbreviations ownership types. Commonly, inputs values columns name_direct_loantaker name_ultimate_parent loanbook dataset, column name_company asset-level dataset. from_name_to_alias() outputs table giving default strings used convert name alias. may amend table pass to_alias() via from_to argument.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign an additional name to an entity — to_alias","text":"","code":"to_alias(x, from_to = NULL, ownership = NULL, remove_ownership = FALSE)"},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Assign an additional name to an entity — to_alias","text":"r2dii.match version 0.1.3.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign an additional name to an entity — to_alias","text":"x Character string, commonly columns name_direct_loantaker name_ultimate_parent loanbook dataset, column name_company asset-level dataset. from_to data frame replacement rules applied, contains columns (initial values) (resulting values). ownership vector company ownership types distinguished cut-separation. remove_ownership Flag defines whether ownership type (like llc) cut-.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign an additional name to an entity — to_alias","text":"to_alias() returns character string. from_name_to_alias() returns tibble::tibble columns .","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"assigning-aliases","dir":"Reference","previous_headings":"","what":"Assigning aliases","title":"Assign an additional name to an entity — to_alias","text":"transformation process used compare names loanbook tilt datasets applies best practices commonly used name matching algorithms: Remove special characters. Replace language specific characters. Abbreviate certain names reduce importance matching. Spell numbers increase importance.","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign an additional name to an entity — to_alias","text":"person(given = \"Evgeny\", family = \"Petrovsky\", role = c(\"aut\", \"ctr\")) Adapted : https://github.com/RMI-PACTA/r2dii.match/blob/main/R/to_alias.R","code":""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/reference/to_alias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign an additional name to an entity — to_alias","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  to_alias(\"A. and B\") #> [1] \"ab\" to_alias(\"Acuity Brands Inc\") #> [1] \"acuitybrands inc\" to_alias(c(\"3M Company\", \"Abbott Laboratories\", \"AbbVie Inc.\")) #> [1] \"threem co\"          \"abbottlaboratories\" \"abbvie inc\"          custom_replacement <- tibble(from = \"AAAA\", to = \"B\") to_alias(\"Aa Aaaa\", from_to = custom_replacement) #> [1] \"aab\"  neutral_replacement <- tibble(from = character(0), to = character(0)) to_alias(\"Company Name Owner\", from_to = neutral_replacement) #> [1] \"companynameowner\" to_alias(   \"Company Name Owner\",   from_to = neutral_replacement,   ownership = \"owner\",   remove_ownership = TRUE ) #> [1] \"companyname\"  from_name_to_alias() #> # A tibble: 61 × 2 #>    from     to     #>    <chr>    <chr>  #>  1 \" and \"  \" & \"  #>  2 \" en \"   \" & \"  #>  3 \" och \"  \" & \"  #>  4 \" und \"  \" & \"  #>  5 \"(pjsc)\" \"\"     #>  6 \"(pte)\"  \"\"     #>  7 \"(pvt)\"  \"\"     #>  8 \"0\"      \"null\" #>  9 \"1\"      \"one\"  #> 10 \"2\"      \"two\"  #> # … with 51 more rows  append_replacements <- from_name_to_alias() %>%   add_row(     .before = 1,     from = c(\"AA\", \"BB\"), to = c(\"alpha\", \"beta\")   ) append_replacements #> # A tibble: 63 × 2 #>    from     to      #>    <chr>    <chr>   #>  1 \"AA\"     \"alpha\" #>  2 \"BB\"     \"beta\"  #>  3 \" and \"  \" & \"   #>  4 \" en \"   \" & \"   #>  5 \" och \"  \" & \"   #>  6 \" und \"  \" & \"   #>  7 \"(pjsc)\" \"\"      #>  8 \"(pte)\"  \"\"      #>  9 \"(pvt)\"  \"\"      #> 10 \"0\"      \"null\"  #> # … with 53 more rows  # And in combination with `to_alias()` to_alias(c(\"AA\", \"BB\", \"1\"), from_to = append_replacements) #> [1] \"alpha\" \"beta\"  \"one\""},{"path":"https://2degreesinvesting.github.io/tilt.company.match/news/index.html","id":"tiltcompanymatch-0009001","dir":"Changelog","previous_headings":"","what":"tilt.company.match 0.0.0.9001","title":"tilt.company.match 0.0.0.9001","text":"Added NEWS.md file track changes package.","code":""}]
